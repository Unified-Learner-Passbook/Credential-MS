// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum VCStatus {
  PENDING
  ISSUED
  REVOKED
}

model VC {
  id                String    @id @default(uuid())
  type              String
  subject           String
  issuer            String
  status            VCStatus  @default(PENDING)
  credential_schema String
  unsigned          Json
  signed            Json?
  created_at        DateTime  @default(now())
  updated_at        DateTime? @default(now())
}

model VCV2 {
  id                String         @id @default(uuid())
  // seqid             BigInt // @default((autoincrement())
  type              String[]
  issuer            String
  issuanceDate      String
  expirationDate    String
  // subject         Json (as per the VC doc this is JSON)
  credential_schema String
  subject           Json
  subjectId         String
  unsigned          Json?
  signed            Json?
  proof             Json?
  status            VCStatus       @default(ISSUED)
  created_at        DateTime       @default(now())
  updated_at        DateTime?      @default(now())
  createdBy         String?
  updatedBy         String?
  tags              String[]
  Presentations     Presentations? @relation(fields: [presentationsId], references: [id])
  presentationsId   String?
}

model Counter {
  id                  String @id @default(uuid()) // @map("_id") @db.ObjectId
  type_of_entity      String @default("Credential")
  for_next_credential Int    @default(0)
}

model Presentations {
  id                   String    @id @default(uuid()) // @map("_id") @db.ObjectId
  type                 String[]
  holder               Json
  verifiableCredential VCV2[]
  proof                Json?
  status               VCStatus  @default(PENDING)
  created_at           DateTime  @default(now())
  updated_at           DateTime? @default(now())
}
